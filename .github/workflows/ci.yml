name: CI

env:
  project: 'release-node'

on: [push, pull_request]

jobs:

  test:
    strategy:
      matrix:
        node-version: [12.x, 14.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache
      id: cache-modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}

    - name: Install
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: npm install

    - name: Test
      run: npm test

    - name: Tarball
      run: tar czvf build.tgz .

    - name: Upload
      # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.project }}_${{ matrix.os }}_${{ matrix.node-version }}_${{ github.sha }}
        path: build.tgz

  # docker:
  #   name: Docker
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Build
  #     run: docker build -t ${{ env.project }} .
  #   - name: Save
  #     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #     run: docker save ${{ env.project }} | gzip > image.tar.gz
  #   - name: Upload
  #     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: docker-image-${{ github.sha }}.tgz
  #       path: image.tar.gz

  # publish:
  #   name: Publish
  #   needs: [test,docker]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #   - name: Version
  #     run: echo "Publishing ${{ github.ref }} as ${GITHUB_REF/refs\/tags\/v/}"

  #   - name: Docker Image Download
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: docker-image-${{ github.sha }}.tgz
  #   - name: Docker Image Load
  #     run: gunzip -c image.tar.gz | docker load && rm image.tar.gz
  #   - name: DockerHub Login
  #     env:
  #       DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #       DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  #     run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
  #   - name: Docker Tag
  #     run: |
  #       docker tag ${{ env.project }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.project }}:${GITHUB_REF/refs\/tags\/v/}
  #       docker tag ${{ env.project }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.project }}:latest
  #   - name: Docker Image Publish
  #     run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.project }}

  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Publish to NPM
  #     env:
  #       NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
  #     run: |
  #       npm config set //registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN
  #       npm publish --access=public
