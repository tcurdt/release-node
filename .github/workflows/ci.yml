name: CI

# on:
#   push:
#     tags:
#       - '*'

on: [push, pull_request]

jobs:

  test:
    name: Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache
      id: cache-modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
    - name: Install
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: npm install
    - name: Test
      run: npm test
    - name: Export
      # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v2
      with:
        name: node-${{ matrix.node-version }}-${{ github.sha }}
        path: |
          !node_modules
          !.github
          !.git
          .
      # uses: actions/cache@v2
      # with:
      #   key: node-${{ matrix.node-version }}-${{ github.sha }}
      #   path: |
      #     !node_modules
      #     !.github
      #     !.git
      #     .

  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: docker build -t node-release .
    - name: Export
      # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: docker save node-release | gzip > image.tar.gz
    - uses: actions/cache@v2
      with:
        path: image.tar.gz
        key: docker

  publish:
    name: Publish
    needs: [test,docker]
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:

    - name: Import Docker
      uses: actions/download-artifact@v2
      with:
        name: docker-${{ github.sha }}
        path: image.tar.gz
    #   id: docker
    #   uses: actions/cache@v2
    #   with:
    #     key: docker
    #     path: image.tar.gz
    # - if: steps.docker.outputs.cache-hit != 'true'
    #   run: false
    - run: gunzip -c image.tar.gz | docker load
    - run: docker images

    - name: Import 12.x
    #   id: node12
    #   uses: actions/cache@v2
    #   with:
    #     key: node-12.x
    #     path: node-12.x
    # - if: steps.docker.node12.cache-hit != 'true'
    #   run: false
      uses: actions/download-artifact@v2
      with:
        name: node-12.x-${{ github.sha }}
        path: node-12.x

    - name: Show
      run: find .

    # - name: Publish
    #   run: echo "releasing ${{ github.ref }} as ${GITHUB_REF/refs\/tags\/v/}"

    #   uses: mikeal/merge-release@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  expire:
    name: Cleanup
    runs-on: ubuntu-latest
    - name: Expire
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        expire-in: 1hour
